server:
  port: 8086
  host: localhost
  servlet:
    contextPath: /event-booking

spring:
  application:
    name: event-booking
  kafka:
    consumer:
      group-id: event-booking-group-id
    producer:
      bootstrap-servers: http://${server.host}:19092
  datasource:
    driver-class-name: org.postgresql.Driver
    #url: jdbc:postgresql://${server.host}:5459/event_db
    url: jdbc:postgresql://${server.host}:5459/event_container
    username: postgres #postgresu
    password: david_ISAIAH_1234#$ #postgres*LpW24
    jmx:
      default-domain: event-booking
    jpa:
      database-platform: org.hibernate.dialect.PostgreSQLDialect
  liquibase:
    contexts: dev
    #url: jdbc:postgresql://${server.host}:5459/event_db
    url: jdbc:postgresql://${server.host}:5459/event_container
    user: postgres #postgresu
    password: david_ISAIAH_1234#$ #postgres*LpW24
    change-log: classpath:/db/changelog/postgresdb.changelog-master.xml
    enabled: true
    dropFirst: false

  flyway:
    baselineOnMigrate: true
    validateOnMigrate: false
    enabled: true
    #locations: classpath:db/migration/mysql
    locations: classpath:db/migration/postgres
    #url: jdbc:postgresql://${server.host}:5459/event_db
    url: jdbc:postgresql://${server.host}:5459/event_container
    user: postgres #postgresu
    password: david_ISAIAH_1234#$ #postgres*LpW24
    depends-on: entityManagerFactory
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    defer-datasource-initialization: false
    hibernate:
      ddl-auto: none #none, create, create-drop, update <create | create-drop | update | validate | none>
      show-sql: 'true'
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        id:
          new_generator_mappings: false
        jdbc:
          time_zone: UTC+1
        show_sql: false
    show-sql: true
  servlet:
    multipart:
      enabled: true
      file-size-threshold: 2KB
      max-file-size: 10MB
      max-request-size: 10MB
  mvc:
    pathmatch:
      matching-strategy: ANT_PATH_MATCHER
  mail:
    host: smtp.gmail.com
    username: <Email>
    port: 465
    password: <EmailAccessToken>
    properties:
      mail:
        smtp:
          starttls:
            required: true
            enable: true
          ssl:
            enable: true
          auth: true
        transport:
          protocol: smtp
        debug: true
    protocol: smtp
    test-connection: false

app:
  api:
    auth:
      url: http://${server.host}:${server.port}${server.servlet.contextPath}/api/v1/auth
  security:
    encryption:
      key: bf538f592a721cfed601da884f4a03cf294cf4507b2e40b11058950407ef3cfa
  opt:
    expire:
      time: 600
  mail:
    sender:
      name: Event Booking Ltd.
      email: <Email>
  jwt:
    authorities:
      key: roles
    expirationDateInMs: 86400000
    header:
      string: Authorization
    jwtCookieName: event-booking
    jwtRefreshCookieName: event-booking-refresh
    refreshExpiration: 8640
    refreshExpirationDateInMs: 8640
    signing:
      key: 837f5b3ae7ccd9498d989595fab6da25b0ca2fbda6424b2d8d0bd24f43e39cd1
    token:
      prefix: Bearer
      validity: 100
